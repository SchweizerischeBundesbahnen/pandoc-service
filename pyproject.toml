[project]
name = "pandoc-service"
version = "0.0.0"  # the version is controll by the pipeline
description = "Service for https://pandoc.org/"
authors = [
    { name = "SBB Polarion Team", email = "polarion-opensource@sbb.ch" },
]
license = "Apache License 2.0"
readme = "README.md"
requires-python=">=3.13,<3.14"
dependencies = [
    "python-docx (==1.1.2)",
    "defusedxml (==0.7.1)",
    "uvicorn (==0.34.2)",
    "asgiref (==3.8.1)",
    "python-multipart (==0.0.20)",
    "fastapi (==0.115.12)"
]

[tool.poetry]
packages = [{include = "app"}]
requires-poetry = ">=2.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "4.2.0"
ruff = "0.11.8"
mypy = "1.15.0"
pytest = "8.3.5"
pytest-mock = "3.14.0"
docker = "7.1.0"
coverage = "7.8.0"
pytest-cov = "6.1.1"
pytest-timeout = "2.4.0"

[tool.poetry.group.test.dependencies]
tox = "4.25.0"
httpx = "0.28.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 240
fix = true
show-fixes = true

[tool.ruff.lint]
extend-select = [
    # --- Recommended ---
    "E", "W", # pycodestyle errors and warnings
    "F",      # Pyflakes
    "I",      # isort
    "C4",     # flake8-comprehensions
    "C90",    # mccabe
    "B",      # flake8-bugbear
    "UP",     # pyupgrade
    "S",      # flake8-bandit
    "PL",     # Pylint
    "PTH",    # flake8-pathlib
    "TCH",    # type-checking imports
    "SIM",    # flake8-simplify
    "T20",    # flake8-print
    "ERA",    # eradicate
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # No assert rule (bandit)
    "PLR2004", # No magic values (pylint)
]

[tool.ruff.format]
line-ending = "lf"

[tool.mypy]
explicit_package_bases = true
disallow_untyped_defs = true
exclude = "tests/.*"
